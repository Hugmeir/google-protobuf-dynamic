Implement:
- message API (with value validation)
  - accessor styles (get_foo/set_foo, foo, foo/set_foo)
  - set_extension/get_extension
  - constants for field numbers
  - constants for enums
  - validate data passed to the constructor
- document mapping between protobuf and Perl
- serialize fields sorted by field number
  (will break current oneof serialization check)
- check what to do for an oneof field with an enum member
  with an invalid value (probably leave unset)
- simple extension option (Google::ProtocolBuffers compatibility)
- load from serialized descriptors
- test serializing tied array/hashes
- implement and test Google::ProtocolBuffer compatibility
- add an introspection API to get an object describing the protobuf
  message corresponding to an object
- make enum value checks optional (just pass through the invalid value
  in both encoding and decoding)
- implement unknown fields (needs uPB support)
- prepare for the different sematics of proto3
  - enums
  - unknown fields
  - maps (maybe add a compatibility layer for protobuf 2.x)
  - any
  - JSON mapping/parsing
- remove from fast path
  - enum validation
  - oneof handling
  - required handling
  - default value handling
- lazy fields
- services
- custom options?
- protoc plugin
