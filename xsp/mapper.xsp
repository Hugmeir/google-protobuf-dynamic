%module{Google::ProtocolBuffers::Dynamic};
%package{Google::ProtocolBuffers::Dynamic::Mapper};

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "mapper.h"

%{

SV*
new(SV *klass, SV *ref = NULL)
  INIT:
    HV *hv = newHV();
  CODE:
    if (ref) {
        if (SvTEMP(ref) && SvREFCNT(ref) == 1) {
            // steal
            SvREFCNT_inc(ref);
            RETVAL = ref;
        } else {
            HV * hv = newHV();
            sv_2mortal((SV *) hv);
            if (!SvROK(ref) || SvTYPE(SvRV(ref)) != SVt_PVHV)
                croak("Not an hash reference");
            HV *orig = (HV *) SvRV(ref);
            I32 items = hv_iterinit(orig), keylen;
            char *key;
            while (SV *sv = hv_iternextsv(orig, &key, &keylen)) {
                hv_store(hv, key, keylen, newSVsv(sv), 0);
            }
            RETVAL = newRV_inc((SV *) hv);
        }
    } else {
        RETVAL = newRV_noinc((SV *) hv);
    }
    sv_bless(RETVAL, gv_stashsv(klass, 0));
  OUTPUT: RETVAL

SV*
decode_to_perl(SV *klass, SV *scalar)
  INIT:
    gpd::Mapper *mapper = (gpd::Mapper *) CvXSUBANY(cv).any_ptr;
    STRLEN bufsize;
    const char *buffer = SvPV(scalar, bufsize);
  CODE:
    RETVAL = mapper->decode_to_perl(buffer, bufsize);

    if (!RETVAL) {
        sv_2mortal(RETVAL);
        croak("Deserialization failed: %s", mapper->last_error_message());
    }
  OUTPUT: RETVAL

SV*
encode_from_perl(SV *klass, SV *ref)
  INIT:
    gpd::Mapper *mapper = (gpd::Mapper *) CvXSUBANY(cv).any_ptr;
  CODE:
    RETVAL = mapper->encode_from_perl(ref);

    if (!RETVAL) {
        sv_2mortal(RETVAL);
        croak("Serialization failed: %s", mapper->last_error_message());
    }
  OUTPUT: RETVAL

SV *
has_field(HV *self)
  INIT:
    gpd::MapperField *field = (gpd::MapperField *) CvXSUBANY(cv).any_ptr;
  CODE:
    bool has_it = field->has_field(self);

    RETVAL = has_it ? &PL_sv_yes : &PL_sv_no;
  OUTPUT: RETVAL

void
clear_field(HV *self)
  INIT:
    gpd::MapperField *field = (gpd::MapperField *) CvXSUBANY(cv).any_ptr;
  CODE:
    field->clear_field(self);

void
get_scalar(HV *self)
  INIT:
    dXSTARG;
    gpd::MapperField *field = (gpd::MapperField *) CvXSUBANY(cv).any_ptr;
  PPCODE:
    field->get_scalar(self, TARG);
    XSprePUSH; PUSHs(TARG);

void
set_scalar(HV *self, SV *value)
  INIT:
    gpd::MapperField *field = (gpd::MapperField *) CvXSUBANY(cv).any_ptr;
  CODE:
    field->set_scalar(self, value);

%}
