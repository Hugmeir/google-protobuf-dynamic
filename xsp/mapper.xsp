%module{Google::ProtocolBuffers::Dynamic};
%package{Google::ProtocolBuffers::Dynamic::Mapper};

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include "mapper.h"

%{

SV*
decode_to_perl(SV *klass, SV *scalar)
  INIT:
    gpd::Mapper *mapper = (gpd::Mapper *) CvXSUBANY(cv).any_ptr;
    STRLEN bufsize;
    const char *buffer = SvPV(scalar, bufsize);
    google::protobuf::Message *instance;
    bool ok;
  CODE:
    instance = mapper->prototype->New();
    SAVEDESTRUCTOR(gpd::free_message, instance);
    ok = instance->ParseFromArray(buffer, bufsize);

    if (!ok) {
        croak("Deserialization failed");
    }

    RETVAL = newSV(0);
    mapper->decode_to_perl(instance, RETVAL);
  OUTPUT: RETVAL

SV*
encode_from_perl(SV *klass, SV *ref)
  INIT:
    gpd::Mapper *mapper = (gpd::Mapper *) CvXSUBANY(cv).any_ptr;
    google::protobuf::Message *instance;
    std::string output;
    bool ok;
  CODE:
    instance = mapper->prototype->New();
    SAVEDESTRUCTOR(gpd::free_message, instance);
    mapper->encode_from_perl(instance, ref);
    ok = instance->SerializeToString(&output);

    if (!ok) {
        croak("Serialization failed");
    }

    RETVAL = newSVpvn(output.data(), output.size());
  OUTPUT: RETVAL

%}
